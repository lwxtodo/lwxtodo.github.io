{"version":3,"sources":["redux/todo/todo.types.js","components/TodoItem.jsx","redux/todo/todo.actions.js","components/TodoList.jsx","components/AddItem.jsx","components/DoneList.jsx","App.js","redux/todo/todo.reducer.js","redux/rootReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["TodoActionTypes","connect","dispatch","markItemAsDone","item","type","payload","clearOneItem","isDone","text","style","textDecoration","checked","onChange","onClick","margin","padding","backgroundColor","border","borderRadius","color","state","items","todo","todoItems","className","filter","map","key","id","addItem","clearAllItems","useState","newItem","setNewItem","readOnly","name","value","e","target","placeholder","Date","myStyles","display","justifyContent","alignItems","flexDirection","marginTop","App","INITIAL_STATE","todoReducer","action","combineReducers","persistConfig","storage","persistedReducer","persistReducer","rootReducer","middleWares","logger","store","createStore","applyMiddleware","persistor","persistStore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a53b8357.chunk.js","sourcesContent":["export const TodoActionTypes = ({\n    ADD_ITEM: 'ADD_ITEM',\n    MARK_ITEM_AS_DONE: 'MARK_ITEM_AS_DONE',\n    CLEAR_ALL_ITEMS: 'CLEAR_ALL_ITEMS',\n    CLEAR_ONE_ITEM: 'CLEAR_ONE_ITEM'\n})","import React from 'react';\nimport { connect } from 'react-redux';\nimport { markItemAsDone, clearOneItem } from '../redux/todo/todo.actions';\n\n\nconst TodoItem = ({ item, markItemAsDone, clearOneItem }) => {\n    const { isDone, text } = item;\n\n    return (\n        <label style={isDone ? { textDecoration: \"line-through\" } : null}>\n            <input\n                type=\"checkbox\"\n                checked={isDone}\n                onChange={() => markItemAsDone(item)}\n            />\n            {text}\n            <button onClick={() => clearOneItem(item)} style={{ margin: '5px', padding: '5px 10px', backgroundColor: 'lightblue', border: 'none', borderRadius: '5px', color: '#fff' }}>\n                X\n            </button>\n        </label>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    markItemAsDone: item => dispatch(markItemAsDone(item)),\n    clearOneItem: item => dispatch(clearOneItem(item))\n})\n\nexport default connect(null, mapDispatchToProps)(TodoItem)","import { TodoActionTypes } from './todo.types'\n\nexport const addItem = (item) => ({\n    type: TodoActionTypes.ADD_ITEM,\n    payload: item\n})\n\nexport const markItemAsDone = (item) => ({\n    type: TodoActionTypes.MARK_ITEM_AS_DONE,\n    payload: item\n})\n\nexport const clearAllItems = () => ({\n    type: TodoActionTypes.CLEAR_ALL_ITEMS\n})\n\nexport const clearOneItem = (item) => ({\n    type: TodoActionTypes.CLEAR_ONE_ITEM,\n    payload: item\n})","import React from 'react';\nimport { connect } from 'react-redux';\nimport TodoItem from './TodoItem'\nimport './TodoList.css';\n\n\nconst TodoList = ({ items }) => (\n    <div className=\"todo-list-container\">\n        {\n            items\n                .filter(item => !item.isDone)\n                .map(item => <TodoItem item={item} key={item.id} />)}\n    </div>\n)\n\nconst mapStateToProps = state => ({\n    items: state.todo.todoItems\n})\n\nexport default connect(mapStateToProps)(TodoList)","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addItem, clearAllItems } from '../redux/todo/todo.actions';\n\n\nconst AddItem = ({ addItem, clearAllItems }) => {\n\n    const [newItem, setNewItem] = useState(\"\");\n\n    const ItemFactory = (text) => ({\n        text,\n        id: + new Date(),\n        isDone: false\n    })\n\n    return (\n        <div>\n            <h3>Preview:</h3>\n            <label>\n                <input type=\"checkbox\" readOnly checked={false} />\n                {newItem}\n            </label>\n            <div>\n                <input\n                    type=\"text\"\n                    name=\"newItem\"\n                    value={newItem}\n                    onChange={e => setNewItem(e.target.value)}\n                    placeholder=\"Add new item\" />\n                <button onClick={() => addItem(ItemFactory(newItem)) && setNewItem(\"\")}>\n                    Add\n                </button>\n                <button onClick={clearAllItems}>\n                    Clear All items\n                </button>\n            </div>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = dispatch => ({\n    addItem: item => dispatch(addItem(item)),\n    clearAllItems: () => dispatch(clearAllItems())\n})\n\nexport default connect(null, mapDispatchToProps)(AddItem)","import React from 'react';\nimport { connect } from 'react-redux';\nimport TodoItem from './TodoItem'\nimport './TodoList.css';\n\n\nconst DoneList = ({ items }) => (\n    <div className=\"todo-list-container\">\n        {\n            items\n                .filter(item => item.isDone)\n                .map(item => <TodoItem item={item} key={item.id} />)\n        }\n    </div>\n)\n\nconst mapStateToProps = state => ({\n    items: state.todo.todoItems\n})\n\nexport default connect(mapStateToProps)(DoneList)","import React from 'react'\nimport TodoList from './components/TodoList'\nimport AddItem from './components/AddItem'\nimport DoneList from './components/DoneList'\nimport './App.css'\n\n\nconst myStyles = {\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexDirection: 'column',\n  marginTop: '100px'\n}\n\nconst App = () => (\n  <div style={myStyles}>\n    <TodoList />\n    <AddItem />\n    <hr />\n    <DoneList />\n  </div>\n)\n\nexport default App;","import { TodoActionTypes } from './todo.types'\n\n\nconst INITIAL_STATE = {\n    todoItems: []\n}\n\n\nconst todoReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case TodoActionTypes.ADD_ITEM:\n            return {\n                ...state,\n                todoItems: [...state.todoItems, action.payload]\n            }\n        case TodoActionTypes.MARK_ITEM_AS_DONE:\n            return {\n                ...state,\n                todoItems: state.todoItems.map(item => item.id === action.payload.id\n                    ? { ...item, isDone: !item.isDone }\n                    : item\n                )\n            }\n        case TodoActionTypes.CLEAR_ALL_ITEMS:\n            return {\n                ...state,\n                todoItems: []\n            }\n        case TodoActionTypes.CLEAR_ONE_ITEM:\n            return {\n                ...state,\n                todoItems: state.todoItems.filter(item => item.id !== action.payload.id)\n            }\n        default:\n            return state;\n    }\n}\n\nexport default todoReducer","import todoReducer from './todo/todo.reducer'\nimport { combineReducers } from 'redux'\n\nexport default combineReducers({\n    todo: todoReducer\n})","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport rootReducer from './rootReducer';\n\nimport { persistReducer, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/es/storage'\n\n\nconst persistConfig = {\n    key: 'root',\n    storage\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middleWares = [logger];\n\nexport const store = createStore(persistedReducer, applyMiddleware(...middleWares));\n\nexport const persistor = persistStore(store);\n\nexport default {\n    store,\n    persistor\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store'\nimport { PersistGate } from 'redux-persist/integration/react'\n\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.register();"],"sourceRoot":""}